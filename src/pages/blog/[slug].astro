---
import MainLayout from '../../layout/MainLayout.astro';
import '../../styles/global.css';

export async function getStaticPaths() {
  
  const blogModules = import.meta.glob('../../blogs/*.md', { eager: true });
  
  return Object.entries(blogModules).map(([path, mod]) => {
    const slug = path.split('/').pop()?.replace('.md', '') || '';
    const module = mod as any;
    
    return {
      params: { slug },
      props: {
        title: module.frontmatter?.title || slug,
        description: module.frontmatter?.description || '',
        date: module.frontmatter?.date || new Date().toISOString().split('T')[0],
        author: module.frontmatter?.author || 'Unknown',
        tags: module.frontmatter?.tags || [],
        content: module.default || (() => 'No content available'),
        rawContent: module.rawContent || ''
      }
    };
  });
}

const { title, description, date, author, tags, content: Content, rawContent } = Astro.props;
---

<MainLayout title={title} description={description} currentPath="/blog">
  <div class="min-h-[calc(100vh-80px)] flex justify-center items-start py-8 px-4">
    <div class="w-full max-w-7xl mx-auto">
      <article class="bg-white dark:bg-gray-900 rounded-lg shadow-lg p-6 md:p-8 lg:p-12">
        <!-- 文章标题 -->
        <header class="text-center mb-6">
          <h1 class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-6">
            {title}
          </h1>
          
          <!-- 文章信息 -->
          <div class="flex flex-col sm:flex-row items-center justify-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-6">
            <!-- 作者 -->
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              <span class="font-medium">{author}</span>
            </div>
            
            <!-- 日期 -->
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>{date}</span>
            </div>
          </div>
          
          <!-- 标签 -->
          {tags.length > 0 && (
            <div class="flex flex-wrap justify-center gap-2 mb-6">
              {tags.map((tag: string, index: number) => (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300 whitespace-nowrap">
                  {tag}
                </span>
              ))}
            </div>
          )}
        </header>

        <!-- 分割线 -->
        <hr class="border-gray-200 dark:border-gray-700 mb-8" />

        <!-- 主内容区域：左侧文章内容 + 右侧目录 -->
        <div class="relative">
          <!-- 左侧：文章内容 - 为右侧目录留出空间 -->
          <main class="lg:pr-72">
            <article class="prose prose-lg dark:prose-invert max-w-none
                            prose-a:text-blue-600 dark:prose-a:text-blue-400
                            prose-pre:rounded-xl prose-pre:bg-slate-900 prose-pre:shadow-lg dark:prose-pre:bg-slate-800
                            prose-code:rounded prose-code:px-1 prose-code:py-0.5 dark:prose-code:bg-slate-800 prose-code:before:content-none prose-code:after:content-none
                            prose-table:text-sm
                            prose-th:bg-gray-50 dark:prose-th:bg-gray-800 prose-th:font-semibold prose-th:text-gray-900 dark:prose-th:text-gray-100
                            prose-td:border-gray-200 dark:prose-td:border-gray-700">
              <Content />
            </article>
          </main>

          <!-- 右侧：目录 - 绝对定位紧贴右边 -->
          <aside class="hidden lg:block absolute top-0 right-0 w-64">
            <div class="sticky top-8">
              <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 shadow-md">
                <h3 class="text-sm font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                  </svg>
                  目录
                </h3>
                
                <nav class="space-y-1" id="table-of-contents">
                  <!-- 目录将通过JavaScript动态生成 -->
                </nav>
              </div>
            </div>
          </aside>
        </div>
      </article>

    </div>
  </div>
</MainLayout>

<style>
  /* 响应式表格样式 */
  .prose table {
    display: block;
    width: 100%;
    overflow-x: auto;
    white-space: nowrap;
    margin: 1.5rem 0;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  @media (max-width: 768px) {
    .prose table {
      font-size: 0.875rem;
      display: block;
      width: 100%;
      overflow-x: auto;
      white-space: nowrap;
      -webkit-overflow-scrolling: touch;
    }
    
    .prose th,
    .prose td {
      padding: 0.5rem 0.75rem !important;
      min-width: 80px;
    }
    
    .prose th {
      position: sticky;
      top: 0;
      background: rgb(249 250 251) !important;
      z-index: 1;
    }
    
    :global(.dark) .prose th {
      background: rgb(31 41 55) !important;
    }
  }

  @media (max-width: 480px) {
    .prose table {
      font-size: 0.75rem;
    }
    
    .prose th,
    .prose td {
      padding: 0.375rem 0.5rem !important;
      min-width: 60px;
    }
  }

  /* 表格滚动提示 */
  .prose table::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 20px;
    background: linear-gradient(to left, rgba(255,255,255,0.8), transparent);
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  @media (max-width: 768px) {
    .prose table:not(:hover)::after {
      opacity: 1;
    }
  }

  :global(.dark) .prose table::after {
    background: linear-gradient(to left, rgba(17,24,39,0.8), transparent);
  }

  /* Emoji 和星级符号优化 */
  .prose table .emoji,
  .prose table [data-emoji] {
    font-size: 1em;
    vertical-align: middle;
  }
</style>

<script>
  // 自动生成目录
  document.addEventListener('DOMContentLoaded', function() {
    const tocContainer = document.getElementById('table-of-contents');
    const headings = document.querySelectorAll('article h1, article h2, article h3, article h4, article h5, article h6');
    
    if (headings.length === 0) {
      if (tocContainer) {
        tocContainer.innerHTML = '<p class="text-sm text-gray-500 dark:text-gray-400">暂无目录</p>';
      }
      return;
    }
    
    const tocList = document.createElement('ul');
    tocList.className = 'space-y-1 text-sm';
    
    headings.forEach((heading, index) => {
      // 为标题添加ID
      const id = `heading-${index}`;
      heading.id = id;
      
      // 创建目录项
      const li = document.createElement('li');
      const link = document.createElement('a');
      
      // 根据标题级别设置缩进和样式
      const level = parseInt(heading.tagName.charAt(1));
      const indent = (level - 1) * 12; // 每级缩进12px
      
      link.href = `#${id}`;
      link.textContent = heading.textContent;
      link.className = `block py-1 px-2 rounded text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-xs`;
      link.style.paddingLeft = `${8 + indent}px`;
      
      // 不同级别的标题使用不同的字重
      if (level === 1) {
        link.className += ' font-semibold';
      } else if (level === 2) {
        link.className += ' font-medium';
      }
      
      li.appendChild(link);
      tocList.appendChild(li);
      
      // 平滑滚动
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetElement = document.getElementById(id);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // 更新URL
          history.pushState(null, '', `#${id}`);
        }
      });
    });
    
    if (tocContainer) {
      tocContainer.appendChild(tocList);
    }
    
    // 高亮当前阅读位置
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`a[href="#${id}"]`);
          
          if (entry.isIntersecting) {
            // 移除所有高亮
            document.querySelectorAll('#table-of-contents a').forEach(link => {
              link.classList.remove('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
            });
            
            // 高亮当前项
            if (tocLink) {
              tocLink.classList.add('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/20');
            }
          }
        });
      },
      {
        rootMargin: '-20% 0% -80% 0%'
      }
    );
    
    // 观察所有标题
    headings.forEach(heading => {
      observer.observe(heading);
    });
  });
</script>
