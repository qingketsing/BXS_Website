---
import MainLayout from "../layout/MainLayout.astro";

// 使用 import.meta.glob 读取blogs文件夹中的所有markdown文件
const blogModules = import.meta.glob('../blogs/*.md', { eager: true });

// 处理文章数据
const processedPosts = Object.entries(blogModules).map(([path, mod]) => {
  const slug = path.split('/').pop()?.replace('.md', '') || '';
  const module = mod as any;

  return {
    title: module.frontmatter?.title || slug,
    description: module.frontmatter?.description || '',
    date: module.frontmatter?.date || new Date().toISOString().split('T')[0],
    author: module.frontmatter?.author || 'Unknown',
    tags: module.frontmatter?.tags || [],
    slug,
    url: `/blog/${slug}`,
    content: module.compiledContent ? module.compiledContent() : ''
  };
}).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

const allPosts = processedPosts;
---

<MainLayout title="All Blogs - BXS" description="BXS Team Blog Posts" currentPath="/blog">
  <!-- MAIN PART -->
  <div class="max-w-6xl mx-auto px-6 py-12">
    <!-- Page Title -->
    <div class="mb-8">
      <h1 class="text-5xl font-bold text-black dark:text-blue-300 mb-6">All Blogs</h1>
    </div>
    
    <!-- Search Section -->
    <div class="w-full mb-12">
      <div class="relative max-w-full">
        <input 
          id="searchInput"
          type="text" 
          placeholder="Search articles" 
          class="w-full px-4 py-3 pr-12 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-50 border-0 rounded-lg focus:outline-none focus:ring-2 focus:ring-black transition-colors placeholder-gray-500 dark:placeholder-gray-400"
        >
        <!-- Search Icon -->
        <div class="absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none">
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
      <!-- Search Results Count -->
      <div id="searchResults" class="mt-4 text-sm text-gray-600 dark:text-gray-400 hidden">
        找到 <span id="resultCount">0</span> 篇文章
      </div>
      <!-- Black Line -->
      <div class="w-full h-0.25 bg-gray-300 dark:bg-white mt-10"></div>
    </div>

    <!--文章列表 -->
    <div id="articlesList" class="space-y-8">
      {allPosts.map((post) => (
        <article class="blog-post border-b border-gray-200 dark:border-gray-700 pb-8 last:border-b-0" data-search-content={JSON.stringify({
          title: post.title.toLowerCase(),
          description: post.description.toLowerCase(),
          author: post.author.toLowerCase(),
          tags: post.tags.map((tag: string) => tag.toLowerCase()).join(' ')
        })}>
          <div class="flex flex-col space-y-3">
            <!-- 文章标题 -->
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
              <a href={post.url}>
                {post.title}
              </a>
            </h2>
            
            <!-- 文章元信息 -->
            <div class="flex items-center space-x-4 text-sm text-gray-600 dark:text-gray-400">
              {post.date && (
                <time datetime={post.date}>
                  {new Date(post.date).toLocaleDateString('zh-CN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
              )}
              {post.author && (
                <span>• {post.author}</span>
              )}
            </div>
            
            <!-- 文章描述 -->
            {post.description && (
              <p class="text-gray-700 dark:text-gray-300 leading-relaxed">
                {post.description}
              </p>
            )}
            
            <!-- 标签 -->
            {post.tags && post.tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {post.tags.map((tag: unknown) => (
                  <span class="px-3 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                    {tag}
                  </span>
                ))}
              </div>
            )}
            
            <!-- 阅读更多链接 -->
            <div class="pt-2">
              <a 
                href={post.url}
                class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium transition-colors"
              >
                阅读全文
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
      
      <!-- 如果没有文章的提示 -->
      {allPosts.length === 0 && (
        <div class="text-center py-12">
          <p class="text-gray-600 dark:text-gray-400 text-lg">暂无文章</p>
        </div>
      )}
      
      <!-- 搜索无结果提示 -->
      <div id="noResults" class="text-center py-12 hidden">
        <p class="text-gray-600 dark:text-gray-400 text-lg">没有找到匹配的文章</p>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // 搜索功能实现
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const articlesList = document.getElementById('articlesList');
    const searchResults = document.getElementById('searchResults');
    const resultCount = document.getElementById('resultCount');
    const noResults = document.getElementById('noResults');
    const blogPosts = document.querySelectorAll('.blog-post');

    if (!searchInput || !articlesList || !searchResults || !resultCount || !noResults) {
      return;
    }

    // 防抖函数
    function debounce(func: Function, wait: number) {
      let timeout: NodeJS.Timeout;
      return function executedFunction(...args: any[]) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // 搜索函数
    function performSearch(query: string) {
      const searchTerm = query.toLowerCase().trim();
      
      if (searchTerm === '') {
        // 如果搜索为空，显示所有文章
        blogPosts.forEach(post => {
          (post as HTMLElement).style.display = 'block';
        });
        if (searchResults) searchResults.classList.add('hidden');
        if (noResults) noResults.classList.add('hidden');
        return;
      }

      let visibleCount = 0;

      blogPosts.forEach(post => {
        const searchContent = (post as HTMLElement).getAttribute('data-search-content');
        
        if (searchContent) {
          try {
            const content = JSON.parse(searchContent);
            const isMatch = 
              content.title.includes(searchTerm) ||
              content.description.includes(searchTerm) ||
              content.author.includes(searchTerm) ||
              content.tags.includes(searchTerm);

            if (isMatch) {
              (post as HTMLElement).style.display = 'block';
              visibleCount++;
            } else {
              (post as HTMLElement).style.display = 'none';
            }
          } catch (e) {
            // 如果JSON解析失败，隐藏该文章
            (post as HTMLElement).style.display = 'none';
          }
        } else {
          (post as HTMLElement).style.display = 'none';
        }
      });

      // 更新结果统计
      if (resultCount) resultCount.textContent = visibleCount.toString();
      if (searchResults) searchResults.classList.remove('hidden');

      // 显示/隐藏无结果提示
      if (visibleCount === 0) {
        if (noResults) noResults.classList.remove('hidden');
      } else {
        if (noResults) noResults.classList.add('hidden');
      }
    }

    // 添加防抖的搜索事件监听器
    const debouncedSearch = debounce(performSearch, 300);
    
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      debouncedSearch(target.value);
    });

    // 清除搜索按ESC键
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchInput.value = '';
        performSearch('');
        searchInput.blur();
      }
    });
  });
</script>
